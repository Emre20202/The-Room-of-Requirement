import serial
import random as rd
import time
import numpy as np
import seaborn as sb
import matplotlib.pyplot as plt
import csv
import pandas as pd
from matplotlib.backends.backend_pdf import PdfPages

target_com_port = 'COM4'
target_uart_speed = 115200

ser = serial.Serial(port=target_com_port, baudrate=target_uart_speed)

def inp1(num):
    if num < 16:
        inp="50010"+str(hex(num)[-1])
    else:
        inp="5001"+str(hex(num)[-2]) 
    return bytes.fromhex(inp)                   

def inp2(num):
    if num < 16:
        inp="50020"+str(hex(num)[-1])
    else:
        inp="5002"+str(hex(num)[-2]) 
    return bytes.fromhex(inp)   

def sel(num):
    if num < 16:
        inp="50030"+str(hex(num)[-1])
    else:
        inp="5003"+str(hex(num)[-2]) 
    return bytes.fromhex(inp)   

def start():
    inp="\x50\x04"
    return bytes(inp,'ascii')

select = ["out+1", "out-1", "in1+in2", "in1-in2", "out/2", "out/4", "out*2", "out*4"]

header = ['Count','Arithmetic Operation','Result','Expected Result','True'];

def find_expected (in1, in2, out_ex, sel):
    if sel==0:
        if out_ex == 255:
            return 0
        else:
            return (out_ex+1)
    elif sel==1:
        if out_ex == 0:
            return 255
        else:
            return (out_ex-1)
    elif sel==2:
        return (in1+in2)
    elif sel==3:
        if (in1-in2) < 0:
            return (256-(in2-in1))
        else:
            return (in1-in2)
    elif sel==4:
        return out_ex // 2
    elif sel==5:
        return (out_ex // 4)
    elif sel==6:
        if (out_ex*2) >= 256:
            return ((out_ex*2) - 256)
            
        else: 
            return (out_ex*2)
    elif sel==7:
        if (out_ex*4) >= 512:
            out_ex = (out_ex*4 - 512)
            if (out_ex) >= 256:
                return (out_ex -256)
            else:
                return out_ex
        elif (out_ex*4) >= 256:
            return (out_ex*4 - 256)
        else:
            return (out_ex*4)      

def select_sequence (sel_sequence, main_seq_ex, inp, inp_ex):
        main_seq =[0,0,0,0,0]
        if sel_sequence == 1:# change only in1
            main_seq[0] = main_seq_ex[0]+1
            main_seq[1] = main_seq_ex[1]
            cmd_read=inp1(inp[0])
            ser.write(cmd_read)
            control = int.from_bytes(ser.read(1),"little")
            if control == 81:
                cmd_read = start()
                ser.write(cmd_read)
                main_seq[2]=int.from_bytes(ser.read(1),"little")
            main_seq[3] = find_expected(inp[0],inp_ex[1],main_seq_ex[2], inp_ex[2])
            if main_seq[2] == main_seq[3]:
                main_seq[4] = 1
            else:
                main_seq[4] = 0
            inp_ex[0] = inp[0]
            return main_seq
            
        elif sel_sequence == 2: # change only in2
            main_seq[0] = main_seq_ex[0]+1
            main_seq[1] = main_seq_ex[1]
            cmd_read = inp2(inp[1])
            ser.write(cmd_read)
            control = int.from_bytes(ser.read(1),"little")
            if control == 82:
                cmd_read = start()
                ser.write(cmd_read)
                main_seq[2] = int.from_bytes(ser.read(1),"little")
            main_seq[3] = find_expected(inp_ex[0],inp[1],main_seq_ex[2], inp_ex[2])
            if main_seq[2] == main_seq[3]:
                main_seq[4] = 1
            else:
                main_seq[4] = 0
            inp_ex[1] = inp[1]
            return main_seq
        
        elif sel_sequence == 3: # change only sel
            main_seq[0] = main_seq_ex[0]+1
            main_seq[1] = inp[2]
            cmd_read = sel(inp[2])
            ser.write(cmd_read)
            control = int.from_bytes(ser.read(1),"little")
            if control == 83:
                cmd_read = start()
                ser.write(cmd_read)
                main_seq[2] = int.from_bytes(ser.read(1),"little")
            main_seq[3] = find_expected(inp_ex[0],inp_ex[1],main_seq_ex[2], inp[2])
            if main_seq[2] == main_seq[3]:
                main_seq[4] = 1
            else:
                main_seq[4] = 0
            inp_ex[2] = inp[2]
            return main_seq
        
        return main_seq

def data_is ():
    main_seq_ex = [0,0,0,0,0] #[count, sel, out, expected, true]
    inp_ex = [0,0,0] #[in1, in2, sel]
    my_sel = np.empty(1000, dtype=object)
    my_out = np.empty(1000, dtype=object)
    my_expected = np.empty(1000, dtype=object)
    my_true = np.empty(1000, dtype=object)

    for i in range (0,1000):
        inp = [rd.randint(0,15) , 0 , rd.randint(0,7)] #[in1, in2, sel]
        inp[1] = inp[0]-rd.randint(0,inp[0])
        if inp[1] > inp_ex[0]:
            inp[1] = inp_ex[0]-rd.randint(0,inp_ex[0])
        sel_sequence = rd.randint(1,3)
        main_seq = select_sequence(sel_sequence, main_seq_ex, inp, inp_ex)
        main_seq_ex = main_seq
        my_sel[i] = select[main_seq[1]]
        my_out[i] = main_seq[2]
        my_expected[i] = main_seq[3]
        my_true[i] = main_seq[4]

    my_data = pd.DataFrame({'Arithmetic' :my_sel, 'Result' : my_out, 'Expected' : my_expected , 'Is_True' : my_true} )

    print(my_data)    
    return my_data                      

def output_df_to_pdf(pdf, data):
    table_cell_width = 25
    table_cell_height = 6
    pdf.set_font('Times','B',12)
    data.columns = data.columns.str.strip()
    cols = data.columns
    for col in cols:
        pdf.cell(table_cell_width, table_cell_height, col, align='C', border=1)
    pdf.ln(table_cell_height)
    pdf.set_font('Times','B',12)
    for row in data.itertuples():
        
        for col in cols:
            value = str(getattr(row,col))
            pdf.cell(table_cell_width, table_cell_height, value, align='C', border=1)
        pdf.ln(table_cell_height)
    

def plot_label (data):
    labels = 'True', 'False'
    num_of_true = 0
    num_of_false = 0
    for element in data['Is_True']:
        if element == 1:
            num_of_true = num_of_true + 1
        else:
            num_of_false = num_of_false + 1
    sizes = [num_of_true, num_of_false]
    explode = (0, 0.1)  # only "explode" the 2nd slice (i.e. 'Hogs')
    fig1, ax1 = plt.subplots()
    my_colors = ['#98F5FF','#FF6103']
    ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
    shadow=True, colors= my_colors, startangle=90)
    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
    plt.savefig('foo.png')
    plt.show(fig1)
    plt.close()
    return num_of_true, num_of_false

from fpdf import FPDF
from matplotlib.backends.backend_pdf import PdfPages
my_data = data_is()
false_results = my_data.loc[my_data['Is_True'] == 0]
arithmetic_of_false = false_results['Arithmetic']
result_false = false_results['Result']
expected_false = false_results['Expected']

my_pdf = FPDF()
my_pdf.add_page()
plt.figure(figsize=(3, 3))
num_of_true, num_of_false = plot_label(my_data)
my_pdf = FPDF()
my_pdf.add_page()
my_pdf.set_font('Times','B',20)
my_pdf.cell(40,10,'My ALU Machine Results        Emre Çifçi')
my_pdf.ln(20)
my_pdf.image('foo.png');
my_pdf.ln(20)
my_pdf.set_font('Times', '', 16)
my_pdf.cell(40,10,'# Total Number of True Results : %d' %num_of_true)
my_pdf.ln(10)
my_pdf.cell(40,10,'# Total Number of False Results : %d' %num_of_false)
my_pdf.ln(20)
for i in range(0,num_of_false):
    if (i == 0):
        my_pdf.set_font('Times','B',16)
        my_pdf.cell(40,10,'Arithmetic Operation    Result     Expected Result')
        my_pdf.ln(10)
        my_pdf.set_font('Times','',16)
    my_pdf.cell(40,10,'%s                                %d                     %d'% (arithmetic_of_false[i], result_false[i] , expected_false[i]))
    my_pdf.ln(10)
my_pdf.ln(20)
my_pdf.add_page()
output_df_to_pdf(my_pdf, my_data)
my_pdf.ln(20)
my_pdf.output('my_alu_results.pdf','F');

#    Arithmetic Result Expected Is_True
#0        out+1      1        1       1
#1        out/2      0        0       1
#2        out/4      0        0       1
#3        out/4      0        0       1
#4        out/4      0        0       1
#..         ...    ...      ...     ...
#995      out/2      1        1       1
#996      out*4      4        4       1
#997      out*4     16       16       1
#998      out+1     17       17       1
#999      out+1     18       18       1

#[1000 rows x 4 columns]

#<Figure size 216x216 with 0 Axes>


